#version 450

// Define a work group size to be 8x8.
layout(local_size_x = 8, local_size_y = 8) in;

/* uvec3 gl_NumWorkGroups; // Global work group size we gave to glDispatchCompute() */
/* uvec3 gl_WorkGroupSize; // Local work group size we defined with layout */
/* uvec3 gl_WorkGroupID; // Position of current invocation in global work group */
/* uvec3 gl_LocalInvocationID; // Position of current invocation in local work group */
/* uvec3 gl_GlobalInvocationID; // Unique index of current invocation in global work group */
/* uint gl_LocalInvocationIndex; // 1d index representation of gl_LocalInvocationID */

// Use the image2D sampler to address specific pixels directly.
layout(rgba32f, binding = 0) uniform image2D present;
layout(rgba32f, binding = 1) uniform image2D back;
layout(rgba32f, binding = 2) uniform image2D front;

struct BandData {
    float accumulated;
    float window;
    float smooth_window;
    float avg_delta2;
    float movement;
    float other1, other2, other3;
};

layout(std430, binding = 5) buffer analysis_data {
    bool is_beat;
    int beats;
    int bpm;
    int other;

    BandData sub_bass;
    BandData bass;
    BandData lower_midrange;
    BandData midrange;
    BandData higher_midrange;
    BandData presence;
    BandData brilliance;
};


void main() {
    ivec2 ipixel = ivec2(gl_GlobalInvocationID.xy);
    ivec2 iimage = ivec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);
    ivec2 iimage_x = ivec2(iimage.x, 0);
    ivec2 iimage_y = ivec2(0, iimage.y);

    vec3 p1 = imageLoad(back, ipixel).xyz;
    vec3 p2 = imageLoad(back, ipixel + iimage_x).xyz;
    vec3 p3 = imageLoad(back, ipixel + 2 * iimage_x).xyz;
    vec3 p4 = imageLoad(back, ipixel + iimage_y).xyz;
    vec3 p5 = imageLoad(back, ipixel + iimage).xyz;
    vec3 p6 = imageLoad(back, ipixel + iimage + iimage_x).xyz;
    vec3 p7 = imageLoad(back, ipixel + 2 * iimage_y).xyz;
    vec3 p8 = imageLoad(back, ipixel + iimage + iimage_y).xyz;
    vec3 p9 = imageLoad(back, ipixel + 2 * iimage).xyz;

    vec3 sum = p1 + p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9;

    imageStore(present, ipixel, vec4(sum, 1));
}
